{"version":3,"sources":["components/cardstyle/index.js","components/nav/NavBar.jsx","App.js","serviceWorker.js","index.js"],"names":["CardSetup","props","className","onClick","handleClicked","id","src","image","alt","NavBar","class","score","topScore","title","App","state","isGameOver","card","maxScore","setState","restart","i","length","clicked","console","log","shuffle","arr","a","j","temp","Math","floor","random","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"45FAiBeA,MAdf,SAAmBC,GACf,OACI,yBAAKC,UAAU,QACX,0BAAMC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,KAAKH,UAAU,WAC1D,yBAAKA,UAAU,gBACX,yBAAKI,IAAKL,EAAMM,MAAOC,IAAKP,EAAMI,S,MCkBvCI,MAtBf,SAAgBR,GACd,OACE,6BACE,yBAAKS,MAAM,oDACT,yBAAKA,MAAM,mBACT,yBAAKA,MAAM,iBACT,uBAAGA,MAAM,gBAAT,gBAEF,wBAAIA,MAAM,kBACR,sCAAYT,EAAMU,OAClB,0CAAgBV,EAAMW,aAI5B,yBAAKV,UAAU,YACb,4BAAQA,UAAU,SAASD,EAAMY,OACjC,gIC4FOC,G,kNAvGXC,MAAQ,CACNF,MAAO,kBACPF,MAAO,EACPC,SAAU,EACVI,YAAY,EACZC,Q,EAGJC,SAAW,WACJ,EAAKH,MAAMJ,MAAO,EAAKI,MAAMH,UAChC,EAAKO,SACK,CAACP,SAAU,EAAKG,MAAMJ,S,EAKpCS,QAAU,WACR,IAAK,IAAIC,EAAE,EAAGA,EAAG,EAAKN,MAAME,KAAKK,OAAQD,IACvC,EAAKN,MAAME,KAAKI,GAAGE,SAAU,EAE/B,EAAKR,MAAMJ,MAAQ,EACnB,EAAKI,MAAMF,MAAQ,iDACnBW,QAAQC,IAAI,QAAS,EAAKV,MAAMF,OAChC,EAAKM,SAAS,CACZF,OACAN,MAAO,EAAKI,MAAMJ,MAClBE,MAAO,EAAKE,MAAMF,S,EAKtBa,QAAU,SAACC,GACP,IAAIC,EACAC,EACAC,EAEF,IAAKF,EAAE,EAAGA,EAAE,EAAKb,MAAME,KAAKK,OAAQM,IAClCC,EAAIE,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCE,EAAOH,EAAIC,GACXD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAEb,OAAOH,G,EAKXvB,cAAgB,SAAAC,GACdmB,QAAQC,IAAIpB,GACZmB,QAAQC,IAAI,EAAKV,MAAME,MAEvB,IAAK,IAAII,EAAE,EAAGA,EAAE,EAAKN,MAAME,KAAKK,OAAQD,IAElC,EAAKN,MAAME,KAAKI,IAAM,EAAKN,MAAME,KAAKI,GAAGhB,KAAOA,KACf,IAA/B,EAAKU,MAAME,KAAKI,GAAGE,SACrBC,QAAQC,IAAI,uBACZ,EAAKL,YAIL,EAAKL,MAAME,KAAKI,GAAGE,SAAU,EAE7B,EAAKR,MAAMJ,UAMjB,EAAKQ,SAAS,CACZF,OACAN,MAAO,EAAKI,MAAMJ,MAClBE,MAAO,oBAET,EAAKK,Y,uDAKG,IAAD,OACP,OACE,6BAEA,kBAAC,EAAD,CAAQL,MAAOqB,KAAKnB,MAAMF,MAAOF,MAAOuB,KAAKnB,MAAMJ,MAAOC,SAAUsB,KAAKnB,MAAMH,WAE/E,yBAAKV,UAAU,SACfgC,KAAKnB,MAAME,KAAKkB,KAAI,SAAAlB,GAAI,OAEtB,kBAAC,EAAD,CACAmB,IAAK,OAASnB,EAAKZ,GACnBD,cAAe,EAAKA,cACpBC,GAAIY,EAAKZ,GACTE,MAAOU,EAAKV,MACZgB,QAASN,EAAKM,mB,GA/FJc,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.80121435.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\"\r\n\r\nfunction CardSetup(props) {\r\n    return (\r\n        <div className=\"card\">\r\n            <span onClick={() => props.handleClicked(props.id)} className=\"clicked\">\r\n                <div className=\"imgContainer\">\r\n                    <img src={props.image} alt={props.id} />\r\n                </div>\r\n           </span>\r\n        </div>\r\n    )\r\n\r\n\r\n};\r\n\r\nexport default CardSetup;\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <div>\r\n      <nav class=\"navbar navbar-inverse navbar-fixed-top jumbotron\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"navbar-header\">\r\n            <a class=\"navbar-brand\">Memory Game</a>\r\n          </div>\r\n          <ul class=\"nav navbar-nav\">\r\n            <li>Score: {props.score}</li>\r\n            <li>Top Score: {props.topScore}</li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      <div className=\"underNav\">\r\n        <strong className=\"title\">{props.title}</strong>\r\n        <h5>Click on a character to get started. But remember who you clicked. You can't click them twice</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\nimport card from './card.json'\nimport CardSetup from './components/cardstyle'\nimport NavBar from './components/nav/NavBar';\nimport \"./style.css\";\n\nclass App extends Component {\n\n  //dealing with the score\n    state = {\n      title: \"Adventure Time!\",\n      score: 0,\n      topScore: 0,\n      isGameOver: false,\n      card\n  };\n\n  maxScore = () => {\n      if(this.state.score> this.state.topScore){\n      this.setState(\n                {topScore: this.state.score}\n            )\n      }\n     };\n\n  restart = () => {\n    for (var i=0; i< this.state.card.length; i++){\n      this.state.card[i].clicked = false;\n    }\n    this.state.score = 0;\n    this.state.title = \"Oh No, they've been clicked already! Try again\";\n    console.log(\"title\", this.state.title) //console.logs but doesn't display// it did before idk what changed\n    this.setState({\n      card,\n      score: this.state.score,\n      title: this.state.title\n    });\n  }\n\n\n  shuffle = (arr) => {\n      var a,\n          j,\n          temp;\n      // for (a = this.state.card.length; a > 0; a--) {\n        for (a=0; a<this.state.card.length; a++){\n          j = Math.floor(Math.random() * (a - 1));\n          temp = arr[a];\n          arr[a] = arr[j];\n          arr[j] = temp;\n      }\n      return arr;    \n  };\n  \n\n\n  handleClicked = id => {\n    console.log(id)\n    console.log(this.state.card)\n\n    for (var i=0; i<this.state.card.length; i++){\n      \n      if (this.state.card[i] && this.state.card[i].id === id){\n        if (this.state.card[i].clicked === true){\n          console.log(\"was already clicked\")\n          this.restart();\n          // this.shuffle(card);\n        }\n        else{\n          this.state.card[i].clicked = true\n         \n          this.state.score++\n        \n        // this.shuffle(card);\n        }\n      }\n    }\n    this.setState({\n      card,\n      score: this.state.score,\n      title: \"Adventure Time!\"\n    });\n    this.maxScore();\n    \n  };\n\n\n  render() {\n    return (\n      <div>\n\n      <NavBar title={this.state.title} score={this.state.score} topScore={this.state.topScore}></NavBar>\n      \n      <div className=\"cards\">\n     {this.state.card.map(card => \n      (\n        <CardSetup \n        key={\"card\" + card.id}\n        handleClicked={this.handleClicked}\n        id={card.id}\n        image={card.image}\n        clicked={card.clicked}\n        />\n      ))\n      }\n      </div>\n\n    </div>\n    )\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}